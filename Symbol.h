#ifndef SYMBOL_H
#define SYMBOL_H

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// INCLUDES +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include "ValueSymbolBase.h"

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// NAMESPACE ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

namespace fract
{
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    // FORWARD DECLARATIONS +++++++++++++++++++++++++++++++++++++++++++++++++++
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    template< class ValueType >
    class ValueSymbolBase;
    
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    // SYMBOL +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    
    template< class ValueType >
    class Symbol
    {
        public:
            
        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        // PUBLIC TYPES +++++++++++++++++++++++++++++++++++++++++++++++++++++++
        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        
        typedef std::size_t size_type;
        typedef ValueSymbolBase< ValueType > val_symbol_base_type;
        
        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        // PUBLIC METHODS +++++++++++++++++++++++++++++++++++++++++++++++++++++
        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        
        // DESTRUCTOR ---------------------------------------------------------
            
        virtual ~Symbol( void ){};
        
        // EVALUATE -----------------------------------------------------------
        
        virtual val_symbol_base_type * evaluate( void ) = 0;

        virtual val_symbol_base_type * evaluate( void ) const = 0;
        
        // SIZE ---------------------------------------------------------------
        
        virtual size_type const size( void ) const = 0;
        
        // CLONE --------------------------------------------------------------
        
        virtual Symbol * clone( void ) const = 0;
        
        // IS VALUE -----------------------------------------------------------
        
        virtual bool const isValue( void ) const = 0;

        // ALLOCATE -----------------------------------------------------------

        template< class Type, class Allocator >
        inline static Type * allocate( Allocator allocator )
        {
            return reinterpret_cast< Type * >
            (
                allocator.allocate( sizeof( Type ), nullptr )
            );
        }

        // DEALLOCATE ---------------------------------------------------------

        template< class Allocator >
        inline static void deallocate( Allocator allocator, Symbol * symbol )
        {
            if( symbol != nullptr )
            {
                size_type size = symbol->size();
                symbol->~Symbol();

                allocator.deallocate
                (
                    reinterpret_cast< typename Allocator::value_type * >
                        ( symbol ),
                    size
                );
            }
        }
        
        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    };
    
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#endif // SYMBOL_H
